// 先行断言 （Lookaheads）是告诉 JavaScript 在字符串中向前查找的匹配模式。 当想要在同一个字符串上搜寻多个匹配模式时，这可能非常有用。

// 有两种先行断言：正向先行断言（positive lookahead）和负向先行断言（negative lookahead）。

// 正向先行断言会查看并确保搜索匹配模式中的元素存在，但实际上并不匹配。 正向先行断言的用法是 (?=...)，其中 ... 就是需要存在但不会被匹配的部分。

// 另一方面，负向先行断言会查看并确保搜索匹配模式中的元素不存在。 负向先行断言的用法是 (?!...)，其中 ... 是希望不存在的匹配模式。 如果负向先行断言部分不存在，将返回匹配模式的其余部分。

let quit = 'qu';
let noquit = 'qt';
let quRegex = /q(?=u)/;
let qRegex = /q(?!u)/;
quit.match(quRegex); // ["q"]
noquit.match(qRegex); // ["q"]

// 先行断言的更实际用途是检查一个字符串中的两个或更多匹配模式。 如果第一个匹配模式存在，则第二个匹配模式不会被匹配。
// 这里有一个简单的密码检查器，密码规则是 3 到 6 个字符且至少包含一个数字：
// 正向先行断言会查看并确保搜索匹配模式中的元素存在，但实际上并不匹配。 正向先行断言的用法是 (?=...)，其中 ... 就是需要存在但不会被匹配的部分。
let password = 'abc123';
let checkPass = /(?=\w{3,6})(?=\D*\d)/; // 需要存在3-6个字符，但不匹配。需要存在一个数字。合起来就是要存在3-6个字符且至少包含一个数字
checkPass.test(password); // true


// 使用先行断言以匹配大于 5 个字符且有两个连续数字的密码
let sampleWord = 'astronaut';
let pwRegex = /(?=\w{6,})(?=\D*\d{2})/;
pwRegex.test(sampleWord); // true